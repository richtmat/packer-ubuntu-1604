---
- hosts: localhost
  become: yes
  gather_facts: yes
  vars:
    # Basic settings
    postgresql_version: 9.4
    postgresql_encoding: 'UTF-8'
    postgresql_locale: 'en_US.UTF-8'
    postgresql_ctype: 'en_US.UTF-8'

    postgresql_admin_user: "postgres"
    postgresql_default_auth_method: "trust"

    #postgresql_service_enabled: false # should the service be enabled, default is true

    # postgresql_cluster_name: "main"
    # postgresql_cluster_reset: false

    # List of databases to be created (optional)
    # Note: for more flexibility with extensions use the postgresql_database_extensions setting.
    postgresql_databases:
      - name: finderbox_development
        owner: finderbox    # optional; specify the owner of the database
        # hstore: yes         # flag to install the hstore extension on this database (yes/no)
        # uuid_ossp: yes      # flag to install the uuid-ossp extension on this database (yes/no)
        # citext: yes         # flag to install the citext extension on this database (yes/no)
        encoding: 'UTF-8'   # override global {{ postgresql_encoding }} variable per database
        lc_collate: 'en_GB.UTF-8'   # override global {{ postgresql_locale }} variable per database
        lc_ctype: 'en_GB.UTF-8'     # override global {{ postgresql_ctype }} variable per database

    # List of database extensions to be created (optional)
    # postgresql_database_extensions:
    #   - db: foobar
    #     extensions:
    #       - hstore
    #       - citext

    # List of users to be created (optional)
    postgresql_users:
      - name: finderbox
        pass: rT3NdVZeYKGXpN7h
        encrypted: no       # denotes if the password is already encrypted.

    # List of user privileges to be applied (optional)
    # postgresql_user_privileges:
    #   - name: baz                   # user name
    #     db: foobar                  # database
    #     priv: "ALL"                 # privilege string format: example: INSERT,UPDATE/table:SELECT/anothertable:ALL
    #     role_attr_flags: "CREATEDB" # role attribute flags





    # antigen_zsh_path: "{{ ansible_env.HOME }}/.antigen"
    antigen_oh_my_zsh: true
    antigen_zsh_aliases:
      - { name: "ls", value: "ls -G", user: "all" }
    antigen_zsh_env_vars:
      - { name: "PATH", value: "$PATH:/usr/bin:/bin:/usr/sbin:/usr/local/bin", user: "all" }
    antigen_zsh_plugins:
      - { name: "git", user: "foozer" }
      - { name: "zsh-users/zsh-syntax-highlighting", user: "all" }
    antigen_zsh_themes:
      - { name: "gozilla", user: "vagrant" }
      # - { name: "arrow", user: "vagrant" }
    antigen_zsh_users:
      - vagrant    

  tasks:
    - apt_repository:
        repo: 'ppa:nginx/development'
        update_cache: yes
    - apt: "name={{ item }} state=installed"
      with_items:
        - acl
        - apt-transport-https
        - ca-certificates
        - git
        - wget
        - curl
        - vim
        - zsh
        - htop
        - nginx

  roles:
    - geerlingguy.packer-debian
    - andres-rojas.antigen_zsh
    - ANXS.postgresql
    - chrome
    - nodejs
    - ansible-java8-oracle
    - elasticsearch
    - { role: rvm_io.ruby,
        become: yes,
        rvm1_rubies: ['ruby-2.3.1', 'jruby-9.1.5.0'],
        rvm1_install_path: /usr/local/rvm,
        rvm1_user: root,
        rvm1_bundler_install: yes
      }

    # - name: Install NFS server
    #   apt: name="nfs-kernel-server"

    # - name: Add NFS config
    #   lineinfile: 
    #     dest: /etc/exports
    #     line: '/home/vagrant 172.16.3.1(rw,sync,no_root_squash,no_subtree_check)'
    #     create: yes
    #     state: present

    # - name: Enable NFS server on boot
    #   service: name=nfs-kernel-server state=started enabled=yes
    
    # - name: export fs
    #   shell: exportfs -ar

    # - name: show exports
    #   shell: showmount -e